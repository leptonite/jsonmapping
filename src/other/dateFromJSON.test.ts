import { expect, test } from '@jest/globals';

import '../toThrowJsonMappingError';
import { dateFromJSON } from './dateFromJSON';


test.each([
   ['2010-01-31T15:16:17Z', Date.UTC(2010, 0, 31, 15, 16, 17)],
   ['2010-01-31T15:16:17.1Z', Date.UTC(2010, 0, 31, 15, 16, 17, 100)],
   ['2010-01-31T15:16:17.12Z', Date.UTC(2010, 0, 31, 15, 16, 17, 120)],
   ['2010-01-31T15:16:17.123Z', Date.UTC(2010, 0, 31, 15, 16, 17, 123)],
   ['2010-02-28T15:16:17.123Z', Date.UTC(2010, 1, 28, 15, 16, 17, 123)],
   ['2010-03-31T15:16:17.123Z', Date.UTC(2010, 2, 31, 15, 16, 17, 123)],
   ['2010-04-30T15:16:17.123Z', Date.UTC(2010, 3, 30, 15, 16, 17, 123)],
   ['2010-05-31T15:16:17.123Z', Date.UTC(2010, 4, 31, 15, 16, 17, 123)],
   ['2010-06-30T15:16:17.123Z', Date.UTC(2010, 5, 30, 15, 16, 17, 123)],
   ['2010-07-31T15:16:17.123Z', Date.UTC(2010, 6, 31, 15, 16, 17, 123)],
   ['2010-08-31T15:16:17.123Z', Date.UTC(2010, 7, 31, 15, 16, 17, 123)],
   ['2010-09-30T15:16:17.123Z', Date.UTC(2010, 8, 30, 15, 16, 17, 123)],
   ['2010-10-31T15:16:17.123Z', Date.UTC(2010, 9, 31, 15, 16, 17, 123)],
   ['2010-11-30T15:16:17.123Z', Date.UTC(2010, 10, 30, 15, 16, 17, 123)],
   ['2010-12-31T15:16:17.123Z', Date.UTC(2010, 11, 31, 15, 16, 17, 123)],
   ['1900-02-28T15:16:17.123Z', Date.UTC(1900, 1, 28, 15, 16, 17, 123)],
   ['2000-02-29T15:16:17.123Z', Date.UTC(2000, 1, 29, 15, 16, 17, 123)],
   ['2020-02-29T15:16:17.123Z', Date.UTC(2020, 1, 29, 15, 16, 17, 123)],
])('dateFromJSON %p (%#)', (jsonValue, expected) => {
   expect(dateFromJSON(jsonValue).getTime()).toBe(expected);
});

test.each([
   [null],
   [false],
   [true],
   [0],
   [1],
   [-1],
   [3.14],
   [''],
   ['text'],
   [[]],
   [[1, 2, 3]],
   [{}],
   [{ a: 1, b: 2 }],
   ['2000-01-01T00:00:00'], // missing time zone indicator 'Z'
   ['2000-01-01T00:00:00.000'], // missing time zone indicator 'Z'
   ['2010-01-31T15:16:17.Z'],
   ['2010-01-31T15:16:17.1234Z'],
   ['2010-00-01T15:16:17.123Z'],
   ['2010-01-00T15:16:17.123Z'],
   ['2010-01-32T15:16:17.123Z'],
   ['2010-02-29T15:16:17.123Z'],
   ['2010-03-32T15:16:17.123Z'],
   ['2010-04-31T15:16:17.123Z'],
   ['2010-05-32T15:16:17.123Z'],
   ['2010-06-31T15:16:17.123Z'],
   ['2010-07-32T15:16:17.123Z'],
   ['2010-08-32T15:16:17.123Z'],
   ['2010-09-31T15:16:17.123Z'],
   ['2010-10-32T15:16:17.123Z'],
   ['2010-11-31T15:16:17.123Z'],
   ['2010-12-32T15:16:17.123Z'],
   ['1900-02-29T15:16:17.123Z'],
   ['2000-02-30T15:16:17.123Z'],
   ['2020-02-30T15:16:17.123Z'],
])('dateFromJSON throws %p (%#)', jsonValue => {
   expect(() => dateFromJSON(jsonValue)).toThrowJsonMappingError('date and time in ISO 8601 format expected in jsonValue');
});
